# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19E1JnLyW9HqjqodN4jTc2RK3huPqzXuN
"""

import streamlit as st
import pandas as pd
from utils.fit import fit_model
from models.nca import run_nca
from utils.plots import plot_prediction, plot_residuals, plot_terminal_phase
from utils.download import generate_download_button
from utils.model_comparison import compare_models, display_comparison
from utils.residuals import calculate_residuals, residual_summary, plot_residual_distribution, plot_residuals_vs_pred

st.set_page_config(page_title="PK 모델링 앱", layout="wide")
st.title("💊 약물동태학 모델링 플랫폼")

st.sidebar.header("⚙️ 설정")
model = st.sidebar.selectbox("모델 선택", [
    "1 컴파트먼트 IV bolus",
    "1 컴파트먼트 PO",
    "2 컴파트먼트 IV bolus",
    "2 컴파트먼트 PO",
    "IV infusion (PI)"
])

method = st.sidebar.radio("계산 방식 선택", ["지수함수 기반", "ODE 기반"])

with st.expander("📂 데이터 업로드 또는 예제 사용"):
    uploaded = st.file_uploader("CSV 파일 업로드 (time, conc 열 포함)", type=["csv"])
    if uploaded:
        data = pd.read_csv(uploaded)
    else:
        st.info("예제 데이터 사용 중")
        data = pd.DataFrame({
            "time": [0.5, 1, 2, 3, 4, 6, 8, 12],
            "conc": [15.2, 13.5, 10.3, 7.4, 5.1, 3.2, 2.1, 1.1]
        })

st.write("### 데이터 미리보기")
st.dataframe(data)

st.sidebar.markdown("---")
dose = st.sidebar.number_input("투여량 (Dose, mg)", value=100.0)
if model == "IV infusion (PI)":
    R = st.sidebar.number_input("주입 속도 (Rate, mg/hr)", value=10.0)
    duration = st.sidebar.number_input("주입 시간 (hr)", value=2.0)
else:
    R = None
    duration = None

st.markdown("---")
st.header("📌 모델 적합 결과")
result = fit_model(data, model, method, dose=dose, R=R, duration=duration)

st.write("#### 추정 파라미터")
st.json(result['params'])

plot_prediction(data, result['pred'])
plot_residuals(data, result['pred'])

st.markdown("---")
st.header("📉 NCA 분석")
manual = st.checkbox("터미널 페이즈 수동 선택")
if manual:
    selected_times = st.multiselect("터미널 페이즈로 사용할 시간 선택", data['time'].tolist())
else:
    selected_times = None
nca_result = run_nca(data, selected_times, use_manual=manual)
st.write("#### NCA 파라미터")
st.json(nca_result['params'])
plot_terminal_phase(data, nca_result['pred'], selected_times)

st.markdown("---")
st.header("📊 모델 비교 (AIC/BIC)")
if st.button("모델 비교 실행"):
    comp_df = compare_models(data, method, dose=dose, R=R, duration=duration)
    display_comparison(comp_df, st)

st.markdown("---")
st.header("📤 결과 다운로드")
generate_download_button(result)

st.markdown("---")
st.header("📌 잔차 통계 및 분포 분석")
res = calculate_residuals(data, result['pred'])
st.write(residual_summary(res))
plot_residual_distribution(res)
plot_residuals_vs_pred(result['pred'], res)