# -*- coding: utf-8 -*-
"""ode_models.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BOFWXJin74k5UogGxTBaO5VXy0jnnPek
"""

from scipy.integrate import odeint
import numpy as np

def one_comp_iv_bolus_ode(y, t, k10):
    A1 = y[0]
    dA1_dt = -k10 * A1
    return [dA1_dt]

def simulate_one_comp_iv_bolus(t, dose, k10, V):
    y0 = [dose]
    result = odeint(one_comp_iv_bolus_ode, y0, t, args=(k10,))
    A1 = result[:, 0]
    return A1 / V

def one_comp_po_ode(y, t, ka, k):
    A_gut, A_central = y
    dA_gut_dt = -ka * A_gut
    dA_central_dt = ka * A_gut - k * A_central
    return [dA_gut_dt, dA_central_dt]

def simulate_one_comp_po(t, dose, ka, k, V):
    y0 = [dose, 0]
    result = odeint(one_comp_po_ode, y0, t, args=(ka, k))
    A_central = result[:, 1]
    return A_central / V

def two_comp_iv_bolus_ode(y, t, k10, k12, k21):
    A1, A2 = y
    dA1_dt = -(k10 + k12) * A1 + k21 * A2
    dA2_dt = k12 * A1 - k21 * A2
    return [dA1_dt, dA2_dt]

def simulate_two_comp_iv_bolus(t, dose, k10, k12, k21, V1):
    y0 = [dose, 0]
    result = odeint(two_comp_iv_bolus_ode, y0, t, args=(k10, k12, k21))
    A1 = result[:, 0]
    return A1 / V1

def two_comp_po_ode(y, t, ka, k10, k12, k21):
    A_gut, A1, A2 = y
    dA_gut_dt = -ka * A_gut
    dA1_dt = ka * A_gut - (k10 + k12) * A1 + k21 * A2
    dA2_dt = k12 * A1 - k21 * A2
    return [dA_gut_dt, dA1_dt, dA2_dt]

def simulate_two_comp_po(t, dose, ka, k10, k12, k21, V1):
    y0 = [dose, 0, 0]
    result = odeint(two_comp_po_ode, y0, t, args=(ka, k10, k12, k21))
    A1 = result[:, 1]
    return A1 / V1

def one_comp_iv_infusion_ode(y, t, R, k10, duration):
    A1 = y[0]
    infusion = R if t <= duration else 0
    dA1_dt = infusion - k10 * A1
    return [dA1_dt]

def simulate_one_comp_iv_infusion(t, R, k10, V, duration):
    y0 = [0]
    result = odeint(one_comp_iv_infusion_ode, y0, t, args=(R, k10, duration))
    A1 = result[:, 0]
    return A1 / V