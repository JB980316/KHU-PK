# -*- coding: utf-8 -*-
"""nca.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EnL2ENkLO9qd_VltRTVcOzDklnIXIXxM
"""

import numpy as np
import pandas as pd
from scipy.stats import linregress

def calculate_auc(time, conc):
    return np.trapz(conc, time)

def calculate_terminal_slope(time, conc, selected_times=None):
    if selected_times:
        mask = time.isin(selected_times)
        x = time[mask]
        y = np.log(conc[mask])
    else:
        # 자동: 뒤에서 3~5개 조합 중 최고 R² 선택
        best_r2 = -np.inf
        best_slope = None
        best_x, best_y = None, None
        for n in range(3, min(6, len(time))):
            x = time[-n:]
            y = np.log(conc[-n:])
            slope, intercept, r_value, _, _ = linregress(x, y)
            if r_value**2 > best_r2:
                best_r2 = r_value**2
                best_slope = slope
                best_x, best_y = x, y
        x, y = best_x, best_y
        slope = best_slope
    intercept = np.mean(y - slope * x)
    pred = np.exp(slope * time + intercept)
    return -slope, pred

def run_nca(data, selected_times=None, use_manual=False):
    time = data['time']
    conc = data['conc']

    auc = calculate_auc(time, conc)
    ke, terminal_pred = calculate_terminal_slope(time, conc, selected_times if use_manual else None)
    t_half = np.log(2) / ke

    result = {
        'params': {
            'AUC': round(auc, 2),
            'k_elim': round(ke, 4),
            't_half': round(t_half, 2)
        },
        'pred': terminal_pred
    }
    return result