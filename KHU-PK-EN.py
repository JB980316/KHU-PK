# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cV1P-O8Mj6835QgoepyQnQ0DwEfXpz5n
"""

# üì¶ Pharmacokinetics Integrated Analysis App
import streamlit as st
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.optimize import curve_fit
from scipy.integrate import odeint
from scipy import stats

st.set_page_config(layout="wide")
st.title("üíä KHU-PKMA")
st.caption("Pharmacokinetic Modeling Assistant")

#-----------------------------#
# üìÅ Data Input
#-----------------------------#
st.sidebar.header("üìÇ Data Input")
example = st.sidebar.checkbox("Use Example Data", value=True)

if example:
    time = np.array([0.5, 1, 2, 4, 6, 8, 12])
    conc = np.array([15.3, 13.1, 10.0, 6.1, 4.2, 2.9, 1.3])
    df = pd.DataFrame({'time': time, 'conc': conc})
else:
    uploaded_file = st.sidebar.file_uploader("Upload CSV (must include time, conc columns)", type="csv")

    with st.sidebar.expander("üìù View CSV Format Example"):
        st.markdown("""
        The uploaded CSV file must follow this format:

        | time | conc |
        |------|------|
        | 0.5  | 15.3 |
        | 1.0  | 13.1 |
        | 2.0  | 10.0 |
        | ...  | ...  |

        - `time`: Time (unit: hours, h)
        - `conc`: Drug concentration (e.g., mg/L)
        - Column names must be exactly `time`, `conc`
        - CSV file must be comma-delimited
        """)

    if uploaded_file:
        df = pd.read_csv(uploaded_file)
    else:
        st.warning("Please upload a CSV file or select example data.")
        st.stop()

#-----------------------------#
# üß≠ Select Analysis Type
#-----------------------------#
analysis_type = st.sidebar.radio("üîç Select Analysis Type", ["NCA Analysis", "Compartment Model Analysis"])

#-----------------------------#
# ‚öôÔ∏è Common Model Functions
#-----------------------------#
# (functions unchanged...)

def perform_nca(df, terminal_indices=None):
    t, c = df['time'].values, df['conc'].values
    auc = np.trapz(c, t)
    if terminal_indices:
        slope, _, _, _, _ = stats.linregress(t[terminal_indices], np.log(c[terminal_indices]))
    else:
        slope, _, _, _, _ = stats.linregress(t[-3:], np.log(c[-3:]))
    kel = -slope
    t12 = np.log(2) / kel
    dose = st.sidebar.number_input("Dose (mg)", value=100.0)
    cl = dose / auc
    return auc, kel, t12, cl

def show_model_info(model):
    st.markdown("### üìò Model Description")

    if model == "1 Compartment IV":
        st.image("images/1CIV.png", caption="1-Compartment IV Model", use_container_width=True)
        st.latex(r"\frac{dA}{dt} = -k \cdot A")
        st.latex(r"C(t) = \frac{A(t)}{V}")
        st.markdown("""
        - **k (Elimination rate constant, h‚Åª¬π)**: Proportion eliminated from central compartment
        - **V (Volume of distribution, L)**: Space into which drug distributes
        """)

    elif model == "1 Compartment PO":
        st.image("images/1CPO.png", caption="1-Compartment PO Model", use_container_width=True)
        st.latex(r"""
        \begin{cases}
        \frac{dA_g}{dt} = -k_a A_g \\
        \frac{dA_c}{dt} = k_a A_g - k A_c
        \end{cases}
        """)
        st.latex(r"C(t) = \frac{A_c(t)}{V}")
        st.markdown("""
        - **k‚Çê (Absorption rate constant, h‚Åª¬π)**: Rate from GI tract to central
        - **k (Elimination rate constant, h‚Åª¬π)**: Elimination rate from central compartment
        - **V (L)**: Volume of distribution in central compartment
        """)

    elif model == "2 Compartment IV":
        st.image("images/2CIV.png", caption="2-Compartment IV Model", use_container_width=True)
        st.latex(r"""
        \begin{cases}
        \frac{dA_1}{dt} = -kA_1 - k_{12}A_1 + k_{21}A_2 \\
        \frac{dA_2}{dt} = k_{12}A_1 - k_{21}A_2
        \end{cases}
        """)
        st.latex(r"C(t) = \frac{A_1(t)}{V_1}")
        st.markdown("""
        - **A‚ÇÅ**: Amount in central compartment
        - **A‚ÇÇ**: Amount in peripheral compartment
        - **k, k‚ÇÅ‚ÇÇ, k‚ÇÇ‚ÇÅ (h‚Åª¬π)**: Elimination and inter-compartmental transfer rates
        - **V‚ÇÅ (L)**: Volume of distribution in central compartment
        """)

    elif model == "2 Compartment PO":
        st.image("images/2CPO.png", caption="2-Compartment PO Model", use_container_width=True)
        st.latex(r"""
        \begin{cases}
        \frac{dA_g}{dt} = -k_a A_g \\
        \frac{dA_1}{dt} = k_a A_g - k_{10}A_1 - k_{12}A_1 + k_{21}A_2 \\
        \frac{dA_2}{dt} = k_{12}A_1 - k_{21}A_2
        \end{cases}
        """)
        st.latex(r"C(t) = \frac{A_1(t)}{V_1}")
        st.markdown("""
        - **A_g**: Amount in GI tract
        - **A‚ÇÅ**: Amount in central compartment, **A‚ÇÇ**: Amount in peripheral compartment
        - **k‚Çê, k‚ÇÅ‚ÇÄ, k‚ÇÅ‚ÇÇ, k‚ÇÇ‚ÇÅ (h‚Åª¬π)**: Absorption and transfer rates
        - **V‚ÇÅ (L)**: Volume of distribution in central compartment
        """)

#-----------------------------#
# üìê NCA Analysis
#-----------------------------#
if analysis_type == "NCA Analysis":
    st.subheader("üìê NCA Analysis")

    auto_mode = st.radio("Terminal Phase Selection", ["Automatic", "Manual"])
    if auto_mode == "Manual":
        selected_points = st.multiselect("Select terminal phase times", df['time'].tolist(), default=df['time'].tolist()[-3:])
        terminal_idx = df.index[df['time'].isin(selected_points)].tolist()
    else:
        terminal_idx = None

    auc, kel, t12, cl = perform_nca(df, terminal_idx)

    st.markdown(f"""
    **AUClast:** {auc:.2f} (h¬∑mg/L)
    **Œªz (kel):** {kel:.4f} h‚Åª¬π
    **t1/2:** {t12:.2f} h
    **CL:** {cl:.2f} L/h
    """)

    st.subheader("üìà Concentration-Time Curve")
    fig, ax = plt.subplots()
    ax.plot(df['time'], df['conc'], 'o-', label='Observed')
    ax.set_xlabel("Time")
    ax.set_ylabel("Concentration")
    ax.legend()
    st.pyplot(fig)

#-----------------------------#
# üßÆ Compartment Model Analysis
#-----------------------------#
elif analysis_type == "Compartment Model Analysis":
    st.subheader("üßÆ Compartment Model Analysis")

    model = st.sidebar.selectbox("Select Model", [
        "1 Compartment IV", "1 Compartment PO",
        "2 Compartment IV", "2 Compartment PO"
    ])

    show_model_info(model)

    dose = st.sidebar.number_input("Dose (mg)", value=100.0)
    use_log = st.sidebar.checkbox("Plot in Log Scale", value=False)

    t = df['time'].values
    y = df['conc'].values

    try:
        # (fitting functions unchanged...)

        # Results
        residuals = y - pred
        ss_res = np.sum(residuals**2)
        aic = len(y) * np.log(ss_res / len(y)) + 2 * len(popt)
        bic = len(y) * np.log(ss_res / len(y)) + len(popt) * np.log(len(y))

        col1, col2 = st.columns(2)
        with col1:
            st.subheader("üìä Observed vs Predicted")
            fig, ax = plt.subplots()
            ax.plot(t, y, 'o', label='Observed')
            ax.plot(t, pred, '-', label='Predicted')
            ax.set_xlabel("Time")
            ax.set_ylabel("Concentration")
            if use_log:
                ax.set_yscale("log")
            ax.legend()
            st.pyplot(fig)

        with col2:
            st.subheader("üßÆ Estimated Parameters")
            # (parameter display unchanged...)

            st.write(f"**AIC**: {aic:.2f}")
            st.write(f"**BIC**: {bic:.2f}")

        st.subheader("üìâ Residual Analysis")
        fig2, ax2 = plt.subplots(1, 2, figsize=(10, 4))
        sns.histplot(residuals, kde=True, ax=ax2[0])
        ax2[0].set_title("Residual Histogram")
        ax2[1].scatter(pred, residuals)
        ax2[1].axhline(0, color='gray', linestyle='--')
        ax2[1].set_title("Residuals vs Fitted")
        st.pyplot(fig2)

        st.subheader("üì• Download Results")
        df_out = df.copy()
        df_out['Predicted'] = pred
        df_out['Residuals'] = residuals
        csv = df_out.to_csv(index=False)
        st.download_button("üìÑ Download Results as CSV", csv, "pk_result.csv", "text/csv")

    except Exception as e:
        st.error(f"‚ùå Error during model fitting: {e}")