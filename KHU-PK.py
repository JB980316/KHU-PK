# -*- coding: utf-8 -*-
"""KHU-PK.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZQfW040HahTsU-NkHMkxnehEWX4e95Zg
"""

import numpy as np
import matplotlib.pyplot as plt
import streamlit as st
from scipy.integrate import odeint, simpson

# ====== Common Functions ======

def create_time_vector(duration, dt=0.1):
    return np.arange(0, duration + dt, dt)

def simulate_ode(time, tau, n_doses, ode_func, y0, params, repeat=False):
    full_result = np.zeros((len(time), len(y0)))
    y = y0.copy()

    if repeat:
        for i in range(n_doses):
            t_start = i * tau
            t_end = time[-1] if i == n_doses - 1 else (i + 1) * tau
            if i == n_doses - 1:
                mask = (time >= t_start) & (time <= t_end)
            else:
                mask = (time >= t_start) & (time < t_end)
            t_segment = time[mask] - t_start
            if i > 0:
                y[0] += params['dose']
            result = odeint(ode_func, y, t_segment, args=(params,))
            full_result[mask] = result
            y = result[-1]
    else:
        result = odeint(ode_func, y0, time, args=(params,))
        full_result = result

    return full_result

# ====== Model Definitions ======

def one_compartment_iv_ode(y, t, p):
    A = y[0]
    return [-p['kel'] * A]

def one_compartment_po_ode(y, t, p):
    Ag, A = y
    dAg_dt = -p['ka'] * Ag
    dA_dt = p['ka'] * Ag - p['kel'] * A
    return [dAg_dt, dA_dt]

def one_compartment_infusion_ode(y, t, p):
    A = y[0]
    k0 = p['dose'] / p['infusion_time'] if t <= p['infusion_time'] else 0
    return [k0 - p['kel'] * A]

def two_compartment_iv_ode(y, t, p):
    A1, A2 = y
    dA1 = -p['k10'] * A1 - p['k12'] * A1 + p['k21'] * A2
    dA2 = p['k12'] * A1 - p['k21'] * A2
    return [dA1, dA2]

def two_compartment_po_ode(y, t, p):
    Ag, A1, A2 = y
    dAg = -p['ka'] * Ag
    dA1 = p['ka'] * Ag - p['k10'] * A1 - p['k12'] * A1 + p['k21'] * A2
    dA2 = p['k12'] * A1 - p['k21'] * A2
    return [dAg, dA1, dA2]

def two_compartment_infusion_ode(y, t, p):
    A1, A2 = y
    k0 = p['dose'] / p['infusion_time'] if t <= p['infusion_time'] else 0
    dA1 = k0 - p['k10'] * A1 - p['k12'] * A1 + p['k21'] * A2
    dA2 = p['k12'] * A1 - p['k21'] * A2
    return [dA1, dA2]

# ====== Streamlit UI ======
st.set_page_config(page_title="KHU-PK Simulator", page_icon="ðŸ’Š")
st.title("ðŸ’ŠKHU-PK Simulator")

model_type = st.selectbox(
    "Select a model",
    [
        "1 Compartment IV",
        "1 Compartment IV (Multiple Dosing)",
        "1 Compartment PO",
        "1 Compartment PO (Multiple Dosing)",
        "1 Compartment Infusion",
        "2 Compartment IV",
        "2 Compartment IV (Multiple Dosing)",
        "2 Compartment PO",
        "2 Compartment PO (Multiple Dosing)",
        "2 Compartment Infusion"
    ]
)

repeat = "Multiple Dosing" in model_type
po = "PO" in model_type
infusion = "Infusion" in model_type

dose = st.number_input("Dose per administration (mg)", value=500.0)
tau = st.number_input("Dosing interval Ï„ (hr)", value=8.0) if repeat else None
n_doses = st.number_input("Number of doses", value=10, step=1) if repeat else 1

# Parameter inputs
if model_type.startswith("1 Compartment IV"):
    Vd = st.number_input("Volume of distribution (Vd, L)", value=20.0)
    kel = st.number_input("Elimination rate constant (kel, 1/hr)", value=0.2)
    params = {'dose': dose, 'kel': kel}
elif model_type.startswith("1 Compartment PO"):
    Vd = st.number_input("Volume of distribution (Vd, L)", value=20.0)
    ka = st.number_input("Absorption rate constant (ka, 1/hr)", value=1.0)
    kel = st.number_input("Elimination rate constant (kel, 1/hr)", value=0.2)
    params = {'dose': dose, 'ka': ka, 'kel': kel}
elif model_type.startswith("2 Compartment IV"):
    V1 = st.number_input("Central volume (V1, L)", value=15.0)
    k10 = st.number_input("k10 (1/hr)", value=0.15)
    k12 = st.number_input("k12 (1/hr)", value=0.1)
    k21 = st.number_input("k21 (1/hr)", value=0.05)
    params = {'dose': dose, 'k10': k10, 'k12': k12, 'k21': k21}
elif model_type.startswith("2 Compartment PO"):
    V1 = st.number_input("Central volume (V1, L)", value=15.0)
    ka = st.number_input("Absorption rate constant (ka, 1/hr)", value=1.2)
    k10 = st.number_input("k10 (1/hr)", value=0.15)
    k12 = st.number_input("k12 (1/hr)", value=0.1)
    k21 = st.number_input("k21 (1/hr)", value=0.05)
    params = {'dose': dose, 'ka': ka, 'k10': k10, 'k12': k12, 'k21': k21}
elif model_type == "1 Compartment Infusion":
    Vd = st.number_input("Volume of distribution (Vd, L)", value=20.0)
    kel = st.number_input("Elimination rate constant (kel, 1/hr)", value=0.2)
    infusion_time = st.number_input("Infusion duration (hr)", value=2.0)
    params = {'dose': dose, 'kel': kel, 'infusion_time': infusion_time}
elif model_type == "2 Compartment Infusion":
    V1 = st.number_input("Central volume (V1, L)", value=15.0)
    k10 = st.number_input("k10 (1/hr)", value=0.15)
    k12 = st.number_input("k12 (1/hr)", value=0.1)
    k21 = st.number_input("k21 (1/hr)", value=0.05)
    infusion_time = st.number_input("Infusion duration (hr)", value=2.0)
    params = {'dose': dose, 'k10': k10, 'k12': k12, 'k21': k21, 'infusion_time': infusion_time}

# Simulation durations
if repeat:
    metrics_end = tau * n_doses
    extension = tau
    duration = metrics_end + extension
else:
    duration = 24

# Run simulation
time = create_time_vector(duration)

if model_type.startswith("1 Compartment IV"):
    y0 = [dose]
    result = simulate_ode(time, tau, int(n_doses), one_compartment_iv_ode, y0, params, repeat)
elif model_type.startswith("1 Compartment PO"):
    y0 = [dose, 0]
    result = simulate_ode(time, tau, int(n_doses), one_compartment_po_ode, y0, params, repeat)
elif model_type == "1 Compartment Infusion":
    y0 = [0]
    result = simulate_ode(time, tau, int(n_doses), one_compartment_infusion_ode, y0, params, repeat)
elif model_type.startswith("2 Compartment IV"):
    y0 = [dose, 0]
    result = simulate_ode(time, tau, int(n_doses), two_compartment_iv_ode, y0, params, repeat)
elif model_type.startswith("2 Compartment PO"):
    y0 = [dose, 0, 0]
    result = simulate_ode(time, tau, int(n_doses), two_compartment_po_ode, y0, params, repeat)
elif model_type == "2 Compartment Infusion":
    y0 = [0, 0]
    result = simulate_ode(time, tau, int(n_doses), two_compartment_infusion_ode, y0, params, repeat)

# New: compartment selector UI
compartment_names = [f"Compartment {i+1}" for i in range(result.shape[1])]
selected_compartments = st.multiselect("Select compartments to display", compartment_names, default=compartment_names)

# Plot results and compute metrics
if st.button("Plot Graph"):
    fig, ax = plt.subplots()
    for i, name in enumerate(compartment_names):
        if name in selected_compartments:
            vol = Vd if 'Vd' in locals() else V1
            ax.plot(time, result[:, i] / vol, label=name)
    ax.set_xlabel('Time (hr)')
    ax.set_ylabel('Concentration (mg/L)')
    ax.set_title('Concentration-Time Profile')
    ax.legend()
    st.pyplot(fig)

    conc = result[:, 1] / Vd if model_type.startswith("1 Compartment PO") else result[:, 0] / (Vd if 'Vd' in locals() else V1)
    AUC = simpson(conc, time)

    if repeat:
        dt = time[1] - time[0]
        idx_prev = np.where((time >= metrics_end - 2*tau) & (time < metrics_end - tau))[0]
        idx_last = np.where((time >= metrics_end - tau) & (time < metrics_end))[0]
        conc_prev = conc[idx_prev]
        conc_last = conc[idx_last]
        Cmax_prev = np.max(conc_prev)
        Cmax_last = np.max(conc_last)
        Cmin_prev = np.min(conc_prev)
        Cmin_last = np.min(conc_last)
        ss_reached = (abs(Cmax_last - Cmax_prev) / Cmax_last < 0.05) and \
                     (abs(Cmin_last - Cmin_prev) / Cmin_last < 0.05)
        ss_text = 'ðŸŸ¢ Steady-state reached' if ss_reached else 'ðŸ”´ Not at steady-state'
        Css_max = Cmax_last
        Css_min = Cmin_last
        Css_avg = simpson(conc_last, time[idx_last]) / tau

        st.markdown(f"**Steady-state average concentration (Cavg):** {Css_avg:.4f} mg/L")
        st.markdown(f"**Steady-state maximum concentration (Cmax):** {Css_max:.4f} mg/L")
        st.markdown(f"**Steady-state minimum concentration (Cmin):** {Css_min:.4f} mg/L")
        st.markdown(f"**Total AUC (0â€“{duration:.1f} hr):** {AUC:.2f} mgÂ·hr/L")
        st.markdown(f"**Steady-state status:** {ss_text}")
    else:
        Cmax = np.max(conc)
        Tmax = time[np.argmax(conc)]
        st.markdown(f"**Cmax:** {Cmax:.2f} mg/L")
        st.markdown(f"**Tmax:** {Tmax:.2f} hr")
        st.markdown(f"**AUC (0â€“{duration:.1f} hr):** {AUC:.2f} mgÂ·hr/L")