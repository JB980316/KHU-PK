# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gs2vQUTqrIzXSJcYJnWlUnzTbdO7uUaJ
"""

import streamlit as st
import pandas as pd
import numpy as np
from scipy.optimize import curve_fit
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt

# 📄 앱 제목 및 설명
st.set_page_config(page_title="KHU-PKMA", layout="centered")
st.title("💊 KHU-PKMA")
st.caption("Pharmacokinetic Modeling Assistant")

# 📤 사용자 입력
uploaded_file = st.file_uploader("CSV 파일 업로드 (필수 열: time, concentration)", type=["csv"])
dose = st.number_input("투여 용량 (mg)", min_value=1.0, value=100.0)

model_type = st.selectbox("모델 유형 선택", ["1-Compartment IV", "1-Compartment Oral"])
calc_method = st.radio("계산 방식 선택", ["지수함수 해석식", "미분방정식 (ODE)"])

# 📐 모델 함수 정의
def model_1c_iv(t, V, CL):
    k = CL / V
    return (dose / V) * np.exp(-k * t)

def model_1c_oral_closed(t, V, CL, ka):
    k = CL / V
    factor = (dose * ka) / (V * (ka - k))
    return factor * (np.exp(-k * t) - np.exp(-ka * t))

def pk_ode_1c_oral(t, y, ka, CL, V):
    A_gut, A_central = y
    dA_gut = -ka * A_gut
    dA_central = ka * A_gut - (CL / V) * A_central
    return [dA_gut, dA_central]

def solve_pk_ode(t_eval, ka, CL, V):
    y0 = [dose, 0]
    sol = solve_ivp(pk_ode_1c_oral, [t_eval[0], t_eval[-1]], y0, t_eval=t_eval, args=(ka, CL, V))
    A_central = sol.y[1]
    return A_central / V

def model_1c_oral_ode(t, ka, CL, V):
    return solve_pk_ode(t, ka, CL, V)

# 📊 적합도 계산 함수
def aic(n, rss, k):
    return n * np.log(rss / n) + 2 * k

def bic(n, rss, k):
    return n * np.log(rss / n) + k * np.log(n)

def fit_model(model_func, t, y, p0):
    try:
        popt, _ = curve_fit(model_func, t, y, p0=p0, maxfev=10000)
        y_pred = model_func(t, *popt)
        residuals = y - y_pred
        rss = np.sum(residuals**2)
        k = len(popt)
        n = len(t)
        return {
            "params": popt,
            "rss": rss,
            "AIC": aic(n, rss, k),
            "BIC": bic(n, rss, k),
            "y_pred": y_pred
        }
    except Exception as e:
        return None

# 📈 분석 실행
if uploaded_file is not None:
    data = pd.read_csv(uploaded_file)
    if 'time' not in data.columns or 'concentration' not in data.columns:
        st.error("CSV 파일에는 'time'과 'concentration' 열이 포함되어야 합니다.")
    else:
        t = data['time'].values
        y = data['concentration'].values

        result = None
        if model_type == "1-Compartment IV":
            result = fit_model(model_1c_iv, t, y, p0=[10, 1])
        elif model_type == "1-Compartment Oral":
            if calc_method == "지수함수 해석식":
                result = fit_model(model_1c_oral_closed, t, y, p0=[10, 1, 1])
            else:
                result = fit_model(model_1c_oral_ode, t, y, p0=[1, 1, 10])

        if result is None:
            st.error("모델 피팅 중 오류가 발생했습니다.")
        else:
            st.subheader("📊 적합 결과 (AIC / BIC)")
            st.write(f"AIC: {result['AIC']:.2f}")
            st.write(f"BIC: {result['BIC']:.2f}")
            st.write(f"RSS: {result['rss']:.4f}")

            st.subheader("📈 모델 적합 곡선")
            t_fit = np.linspace(min(t), max(t), 200)
            if model_type == "1-Compartment IV":
                y_fit = model_1c_iv(t_fit, *result["params"])
            elif model_type == "1-Compartment Oral":
                if calc_method == "지수함수 해석식":
                    y_fit = model_1c_oral_closed(t_fit, *result["params"])
                else:
                    y_fit = model_1c_oral_ode(t_fit, *result["params"])

            fig, ax = plt.subplots()
            ax.scatter(t, y, label="Observed", color="black")
            ax.plot(t_fit, y_fit, label="Fitted", color="blue")
            ax.set_xlabel("Time (hr)")
            ax.set_ylabel("Concentration (mg/L)")
            ax.grid(True)
            ax.legend()
            st.pyplot(fig)

            st.subheader("🧮 추정된 파라미터")
            param_names = {
                "1-Compartment IV": ["V (L)", "CL (L/hr)"],
                "1-Compartment Oral": {
                    "지수함수 해석식": ["V (L)", "CL (L/hr)", "ka (1/hr)"],
                    "미분방정식 (ODE)": ["ka (1/hr)", "CL (L/hr)", "V (L)"]
                }
            }

            names = (
                param_names[model_type]
                if model_type == "1-Compartment IV"
                else param_names[model_type][calc_method]
            )

            for name, val in zip(names, result["params"]):
                st.write(f"**{name}** = {val:.4f}")